# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Organization {
  _id: ID!
  name: String!

  """URL where the user logs in against"""
  authURL: String!
}

type Dataset {
  _id: ID!
  name: String!
  description: String!
}

type Project {
  _id: ID!
  name: String!
  description: String!
  created: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TagSchema {
  dataSchema: JSON!
  uiSchema: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Study {
  _id: ID!
  name: String!
  description: String!
  instructions: String!
  tagSchema: TagSchema!
  project: ID!
  tagsPerEntry: Float!
}

type UserModel {
  id: ID!
}

type ProjectPermissionModel {
  user: UserModel!
  isProjectAdmin: Boolean!
  editable: Boolean!
}

type StudyPermissionModel {
  user: UserModel!
  isStudyAdmin: Boolean!
  isStudyAdminEditable: Boolean!
  isContributor: Boolean!
  isContributorEditable: Boolean!
  isTrained: Boolean!
  isTrainedEditable: Boolean!
}

type DatasetProjectPermission {
  dataset: Dataset!
  projectHasAccess: Boolean!
}

type Permission {
  owner: Boolean!
  projectAdmin: Boolean!
  studyAdmin: Boolean!
  trainedContributor: Boolean!
  contributor: Boolean!
}

type Entry {
  _id: String!
  organization: ID!
  entryID: String!
  contentType: String!
  dataset: ID!
  creator: ID!
  dateCreated: DateTime!
  meta: JSON!
  signedUrl: String!

  """Get the number of milliseconds the signed URL is valid for."""
  signedUrlExpiration: Float!
}

type UploadSession {
  """The ID of the upload session"""
  _id: ID!
  dataset: String!
  created: DateTime!
}

type UploadResult {
  status: UploadStatus!
  message: String
}

enum UploadStatus {
  ERROR
  WARNING
  SUCCESS
}

type Tag {
  _id: String!
  entry: Entry!
  study: Study!
  complete: Boolean!

  """The user assigned to the tag """
  user: String

  """
  The data stored in the tag, not populated until a colaborator has tagged
  """
  data: JSON

  """Way to rank tags based on order to be tagged"""
  order: Float!

  """
  If the tag is enabled as part of the study, way to disable certain tags
  """
  enabled: Boolean!
}

type Query {
  getOrganizations: [Organization!]!
  exists(name: String!): Boolean!
  getDatasets: [Dataset!]!
  getDatasetsByProject(project: ID!): [Dataset!]!
  getProjectPermissions(project: ID!): [ProjectPermissionModel!]!
  getStudyPermissions(study: ID!): [StudyPermissionModel!]!
  getDatasetProjectPermissions(project: ID!): [DatasetProjectPermission!]!
  getRoles(project: ID, study: ID): Permission!
  projectExists(name: String!): Boolean!
  getProjects: [Project!]!
  studyExists(name: String!, project: ID!): Boolean!
  findStudies(project: ID!): [Study!]!
  entryForDataset(dataset: ID!): [Entry!]!

  """Get the presigned URL for where to upload the CSV against"""
  getCSVUploadURL(session: ID!): String!
  validateCSV(session: ID!): UploadResult!
  getEntryUploadURL(session: ID!, filename: String!, contentType: String!): String!
  isEntryEnabled(study: ID!, entry: ID!): Boolean!
}

type Mutation {
  createOrganization(organization: OrganizationCreate!): Organization!
  createDataset(dataset: DatasetCreate!): Dataset!
  changeDatasetName(dataset: ID!, newName: String!): Boolean!
  changeDatasetDescription(dataset: ID!, newDescription: String!): Boolean!
  grantProjectPermissions(project: ID!, user: ID!, isAdmin: Boolean!): Boolean!
  grantOwner(targetUser: ID!): Boolean!
  grantStudyAdmin(study: ID!, user: ID!, isAdmin: Boolean!): Boolean!
  grantContributor(study: ID!, user: ID!, isContributor: Boolean!): Boolean!
  grantTrainedContributor(study: ID!, user: ID!, isTrained: Boolean!): Boolean!
  grantProjectDatasetAccess(project: ID!, dataset: ID!, hasAccess: Boolean!): Boolean!
  signLabCreateProject(project: ProjectCreate!): Project!
  deleteProject(project: ID!): Boolean!
  createStudy(study: StudyCreate!): Study!
  deleteStudy(study: ID!): Boolean!
  changeStudyName(study: ID!, newName: String!): Study!
  changeStudyDescription(study: ID!, newDescription: String!): Study!
  deleteEntry(entry: ID!): Boolean!
  createUploadSession(dataset: ID!): UploadSession!
  completeUploadSession(session: ID!): UploadResult!
  createTags(study: ID!, entries: [ID!]!): [Tag!]!
  assignTag(study: ID!): Tag
  completeTag(tag: ID!, data: JSON!): Boolean!
  setEntryEnabled(study: ID!, entry: ID!, enabled: Boolean!): Boolean!
}

input OrganizationCreate {
  name: String!

  """URL where the user logs in against"""
  authURL: String!
  projectId: String!
}

input DatasetCreate {
  name: String!
  description: String!
}

input ProjectCreate {
  name: String!
  description: String!
}

input StudyCreate {
  name: String!
  description: String!
  instructions: String!
  tagsPerEntry: Float!
  project: ID!
  tagSchema: TagSchemaInput!
}

input TagSchemaInput {
  dataSchema: JSON!
  uiSchema: JSON!
}